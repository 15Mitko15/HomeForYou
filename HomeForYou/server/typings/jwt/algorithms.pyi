"""
This type stub file was generated by pyright.
"""

from cryptography.hazmat.primitives import hashes

has_crypto = ...
requires_cryptography = ...
def get_default_algorithms(): # -> dict[str, Any]:
    """
    Returns the algorithms that are implemented by the library.
    """
    ...

class Algorithm:
    """
    The interface for an algorithm used to sign and verify tokens.
    """
    def prepare_key(self, key):
        """
        Performs necessary validation and conversions on the key and returns
        the key value in the proper format for sign() and verify().
        """
        ...
    
    def sign(self, msg, key):
        """
        Returns a digital signature for the specified message
        using the specified key value.
        """
        ...
    
    def verify(self, msg, key, sig):
        """
        Verifies that the specified digital signature is valid
        for the specified message and key values.
        """
        ...
    
    @staticmethod
    def to_jwk(key_obj):
        """
        Serializes a given RSA key into a JWK
        """
        ...
    
    @staticmethod
    def from_jwk(jwk):
        """
        Deserializes a given RSA key from JWK back into a PublicKey or PrivateKey object
        """
        ...
    


class NoneAlgorithm(Algorithm):
    """
    Placeholder for use when no signing or verification
    operations are required.
    """
    def prepare_key(self, key): # -> None:
        ...
    
    def sign(self, msg, key): # -> Literal[b""]:
        ...
    
    def verify(self, msg, key, sig): # -> Literal[False]:
        ...
    


class HMACAlgorithm(Algorithm):
    """
    Performs signing and verification operations using HMAC
    and the specified hash function.
    """
    SHA256 = ...
    SHA384 = ...
    SHA512 = ...
    def __init__(self, hash_alg) -> None:
        ...
    
    def prepare_key(self, key): # -> str:
        ...
    
    @staticmethod
    def to_jwk(key_obj): # -> str:
        ...
    
    @staticmethod
    def from_jwk(jwk): # -> bytes:
        ...
    
    def sign(self, msg, key): # -> bytes:
        ...
    
    def verify(self, msg, key, sig): # -> bool:
        ...
    


if has_crypto:
    class RSAAlgorithm(Algorithm):
        """
        Performs signing and verification operations using
        RSASSA-PKCS-v1_5 and the specified hash function.
        """
        SHA256 = hashes.SHA256
        SHA384 = hashes.SHA384
        SHA512 = hashes.SHA512
        def __init__(self, hash_alg) -> None:
            ...
        
        def prepare_key(self, key): # -> SSHPublicKeyTypes | PrivateKeyTypes | PublicKeyTypes:
            ...
        
        @staticmethod
        def to_jwk(key_obj): # -> str:
            ...
        
        @staticmethod
        def from_jwk(jwk): # -> RSAPrivateKey | RSAPublicKey:
            ...
        
        def sign(self, msg, key):
            ...
        
        def verify(self, msg, key, sig): # -> bool:
            ...
        
    
    
    class ECAlgorithm(Algorithm):
        """
        Performs signing and verification operations using
        ECDSA and the specified hash function
        """
        SHA256 = hashes.SHA256
        SHA384 = hashes.SHA384
        SHA512 = hashes.SHA512
        def __init__(self, hash_alg) -> None:
            ...
        
        def prepare_key(self, key): # -> SSHPublicKeyTypes | PublicKeyTypes | PrivateKeyTypes:
            ...
        
        def sign(self, msg, key): # -> bytes:
            ...
        
        def verify(self, msg, key, sig): # -> bool:
            ...
        
    
    
    class RSAPSSAlgorithm(RSAAlgorithm):
        """
        Performs a signature using RSASSA-PSS with MGF1
        """
        def sign(self, msg, key):
            ...
        
        def verify(self, msg, key, sig): # -> bool:
            ...
        
    
    
