"""
This type stub file was generated by pyright.
"""

from typing import Callable, Dict, List, Optional, Union

class PyJWS:
    header_typ = ...
    def __init__(self, algorithms=..., options=...) -> None:
        ...
    
    def register_algorithm(self, alg_id, alg_obj): # -> None:
        """
        Registers a new Algorithm for use when creating and verifying tokens.
        """
        ...
    
    def unregister_algorithm(self, alg_id): # -> None:
        """
        Unregisters an Algorithm for use when creating and verifying tokens
        Throws KeyError if algorithm is not registered.
        """
        ...
    
    def get_algorithms(self): # -> list[str]:
        """
        Returns a list of supported values for the 'alg' parameter.
        """
        ...
    
    def encode(self, payload: Union[Dict, bytes], key: str, algorithm: str = ..., headers: Optional[Dict] = ..., json_encoder: Optional[Callable] = ...): # -> bytes:
        ...
    
    def decode(self, jwt: str, key: str = ..., verify: bool = ..., algorithms: List[str] = ..., options: Dict = ..., **kwargs): # -> bytes:
        ...
    
    def get_unverified_header(self, jwt): # -> Mapping[Any, Any]:
        """Returns back the JWT header parameters as a dict()

        Note: The signature is not verified so the header parameters
        should not be fully trusted until signature verification is complete
        """
        ...
    


_jws_global_obj = ...
encode = ...
decode = ...
register_algorithm = ...
unregister_algorithm = ...
get_unverified_header = ...
